name: Secure CI/CD Workflow with Helm and Trivy Scanning

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      install_longhorn:
        description: 'Enable Longhorn installation?'
        required: false
        default: 'false'
        type: choice
        options: ['true', 'false']

env:
  DOCKER_REGISTRY: docker.io
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend-app
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/backend-api

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      username: ${{ secrets.DOCKER_USERNAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

  build-frontend:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build frontend Docker image
        run: docker build -t ${{ env.FRONTEND_IMAGE }}:latest ./frontend

      - name: Trivy scan frontend image
        id: trivy_frontend
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          skip-files: |
            root/.npm/_cacache/**

      - name: Push frontend image
        if: always()
        run: docker push ${{ env.FRONTEND_IMAGE }}:latest

  build-backend:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build backend Docker image
        run: docker build -t ${{ env.BACKEND_IMAGE }}:latest ./backend

      - name: Trivy scan backend image
        id: trivy_backend
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          skip-files: |
            root/.npm/_cacache/**

      - name: Push backend image
        if: always()
        run: docker push ${{ env.BACKEND_IMAGE }}:latest

  bom-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Pull frontend image
        run: docker pull ${{ env.FRONTEND_IMAGE }}:latest

      - name: Generate and upload SBOM (CycloneDX) for frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:latest
          format: cyclonedx
          output: frontend-sbom.xml

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-sbom
          path: frontend-sbom.xml

  bom-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Pull backend image
        run: docker pull ${{ env.BACKEND_IMAGE }}:latest

      - name: Generate and upload SBOM (CycloneDX) for backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:latest
          format: cyclonedx
          output: backend-sbom.xml

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-sbom
          path: backend-sbom.xml
          
  kics-frontend:
    needs: bom-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install KICS
        run: |
         curl -sSL https://github.com/Checkmarx/kics/releases/download/v1.7.5/kics_1.7.5_linux_x64.tar.gz -o kics.tar.gz
         tar -xzf kics.tar.gz
         chmod +x kics
         sudo mv kics /usr/local/bin/

      - name: Run KICS on frontend helm chart
        run: |
          mkdir -p kics-results
          kics scan -p helm/frontend/ -o kics-results/frontend-results.json --output-format json

      - name: Upload KICS frontend results
        uses: actions/upload-artifact@v4
        with:
          name: kics-frontend
          path: kics-results/frontend-results.json
  kics-backend:
    needs: bom-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install KICS
        run: |
         curl -sSL https://github.com/Checkmarx/kics/releases/download/v1.7.5/kics_1.7.5_linux_x64.tar.gz -o kics.tar.gz
         tar -xzf kics.tar.gz
         chmod +x kics
         sudo mv kics /usr/local/bin/

      - name: Run KICS on backend helm chart
        run: |
          mkdir -p kics-results
          kics scan -p helm/backend/ -o kics-results/backend-results.json --output-format json

      - name: Upload KICS backend results
        uses: actions/upload-artifact@v4
        with:
          name: kics-backend
          path: kics-results/backend-results.json


  connect-to-k8s-cluster:
    name: ðŸ“¡ Simulate Kubernetes Cluster Connection
    runs-on: ubuntu-latest
    needs: [kics-frontend, kics-backend]
    steps:
      - name: Dummy K8s Cluster Connect
        run: echo "âœ… Connected to Kubernetes (simulated)"

  install-longhorn-if-enabled:
    name: ðŸ“¦ Conditional Longhorn Helm Install
    if: ${{ github.event.inputs.install_longhorn == 'true' }}
    needs: connect-to-k8s-cluster
    runs-on: ubuntu-latest
    steps:
      - name: Simulated Helm install for Longhorn
        run: echo "ðŸš€ Longhorn Helm installation would happen here."

  validate-postgres-helm-chart:
    name: ðŸ§ª Validate PostgreSQL Helm Template
    needs: [connect-to-k8s-cluster, install-longhorn-if-enabled]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Helm template for PostgreSQL
        run: helm template helm/postgresql/

  validate-backend-helm-template:
    name: ðŸ§ª Validate Backend Helm Template
    needs: validate-postgres-helm-chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Helm template for Backend
        run: helm template helm/backend/

  validate-frontend-helm-template:
    name: ðŸ§ª Validate Frontend Helm Template
    needs: validate-postgres-helm-chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Helm template for Frontend
        run: helm template helm/frontend/

  deploy-backend-to-k8s:
    name: ðŸš€ Deploy Backend to K8s (Simulated)
    needs: validate-backend-helm-template
    runs-on: ubuntu-latest
    steps:
      - name: Simulate backend Helm install
        run: echo "âœ… Backend deployed via Helm (simulated)."

  deploy-frontend-to-k8s:
    name: ðŸš€ Deploy Frontend to K8s (Simulated)
    needs: validate-frontend-helm-template
    runs-on: ubuntu-latest
    steps:
      - name: Simulate frontend Helm install
        run: echo "âœ… Frontend deployed via Helm (simulated)."

  run-functional-tests:
    name: ðŸ§ª Functional Test with curl (Simulated)
    needs: [deploy-backend-to-k8s, deploy-frontend-to-k8s]
    runs-on: ubuntu-latest
    steps:
      - name: Simulate HTTP API test
        run: |
          echo "ðŸ”¥ Functional testing with curl..."
          curl --version || echo "(Simulation only, no real service running)"
